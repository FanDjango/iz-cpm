

N               	title	'console command processor (CCP), ver 2.0'
                ;	assembly language version of the CP/M console command processor
                ;
                ;	version 2.2 February, 1980
                ;
                ;	Copyright (c) 1976, 1977, 1978, 1979, 1980
                ;	Digital Research
                ;	Box 579, Pacific Grove,
                ;	California, 93950
                ;
 0000 =         false	equ	0000h
 FFFF =         true	equ	not false
                ;
                ;
 F000           	org	0f000h
 F800 =         bdosl	equ	$+800h		;bdos location
 0100 =         tran	equ	100h
 F000 =         tranm	equ	$
 F000 =         ccploc	equ	$
                ;
                ;	********************************************************
                ;	*	Base of CCP contains the following code/data   *
                ;	*	ccp:	jmp ccpstart	(start with command)   *
                ;	*		jmp ccpclear    (start, clear command) *
                ;	*	ccp+6	127		(max command length)   *
                ;	*	ccp+7	comlen		(command length = 00)  *
                ;	*	ccp+8	' ... '		(16 blanks)	       *
                ;	********************************************************
                ;	* Normal entry is at ccp, where the command line given *
                ;	* at ccp+8 is executed automatically (normally a null  *
                ;	* command with comlen = 00).  An initializing program  *
                ;	* can be automatically loaded by storing the command   *
                ;	* at ccp+8, with the command length at ccp+7.  In this *
                ;	* case, the ccp executes the command before prompting  *
                ;	* the console for input.  Note that the command is exe-*
                ;	* cuted on both warm and cold starts.  When the command*
                ;	* line is initialized, a jump to "jmp ccpclear" dis-   *
                ;	* ables the automatic command execution.               *
                ;	********************************************************
                ;
 F000 C35CF3    	jmp	ccpstart	;start ccp with possible initial command
 F003 C358F3    	jmp	ccpclear	;clear the command buffer
 F006 7F        maxlen:	db	127	;max buffer length
 F007 00        comlen:	db	0	;command length (filled in by dos)
                ;	(command executed initially if comlen non zero)
                combuf:
 F008 2020202020	db	'        '	;8 character fill
 F010 2020202020	db	'        '	;8 character fill
 F018 434F505952	db	'COPYRIGHT (C) 1979, DIGITAL RESEARCH  '; 38
 F03E           	ds	128-($-combuf)
                ;	total buffer length is 128 characters
 F088 08F0      comaddr:dw	combuf	;address of next to char to scan
 F08A           staddr:	ds	2	;starting address of current fillfcb request
                ;
 0004 =         diska	equ	0004h	;disk address for current disk
 0005 =         bdos	equ	0005h	;primary bdos entry point
 0080 =         buff	equ	0080h	;default buffer
 005C =         fcb	equ	005ch	;default file control block
                ;
 0001 =         rcharf	equ	1	;read character function
 0002 =         pcharf	equ	2	;print character function
 0009 =         pbuff	equ	9	;print buffer function
 000A =         rbuff	equ	10	;read buffer function
 000B =         breakf	equ	11	;break key function
 000C =         liftf	equ	12	;lift head function (no operation)
 000D =         initf	equ	13	;initialize bdos function
 000E =         self	equ	14	;select disk function
 000F =         openf	equ	15	;open file function
 0010 =         closef	equ	16	;close file function
 0011 =         searf	equ	17	;search for file function
 0012 =         searnf	equ	18	;search for next file function
 0013 =         delf	equ	19	;delete file function
 0014 =         dreadf	equ	20	;disk read function
 0015 =         dwritf	equ	21	;disk write function
 0016 =         makef	equ	22	;file make function
 0017 =         renf	equ	23	;rename file function
 0018 =         logf	equ	24	;return login vector
 0019 =         cself	equ	25	;return currently selected drive number
 001A =         dmaf	equ	26	;set dma address
 0020 =         userf	equ	32	;set user number
                ;
                ;	special fcb flags
 0009 =         rofile	equ	9	;read only file
 000A =         sysfile	equ	10	;system file flag
                ;
                ;	special characters
 000D =         cr	equ	13	;carriage return
 000A =         lf	equ	10	;line feed
 005F =         la	equ	5fh	;left arrow
 001A =         eofile	equ	1ah	;end of file
                ;
                ;	utility procedures
                printchar:
 F08C 5F0E02C305	mov e,a! mvi c,pcharf! jmp bdos
                ;
                printbc:
                	;print character, but save b,c registers
 F092 C5CD8CF0C1	push b! call printchar! pop b! ret
                ;
                crlf:
 F098 3E0DCD92F0	mvi a,cr! call printbc
 F09D 3E0AC392F0	mvi a,lf! jmp  printbc
                ;
                blank:
 F0A2 3E20C392F0	mvi a,' '! jmp printbc
                ;
                print:	;print string starting at b,c until next 00 entry
 F0A7 C5CD98F0E1	push b! call crlf! pop h ;now print the string
 F0AC 7EB7C8    prin0:	mov a,m! ora a! rz ;stop on 00
 F0AF 23E5      		inx h! push h ;ready for next
 F0B1 CD8CF0E1  		call printchar! pop h ;character printed
 F0B5 C3ACF0    		jmp prin0 ;for another character
                ;
                initialize:
 F0B8 0E0DC30500	mvi c,initf! jmp bdos
                ;
                select:
 F0BD 5F0E0EC305	mov e,a! mvi c,self! jmp bdos
                ;
                bdos$inr:
 F0C3 CD050032EE	call bdos! sta dcnt! inr a! ret
                ;
                open:	;open the file given by d,e
 F0CB 0E0FC3C3F0	mvi c,openf! jmp bdos$inr
                ;
                openc:	;open comfcb
 F0D0 AF32EDF7  	xra a! sta comrec ;clear next record to read
 F0D4 11CDF7C3CB	lxi d,comfcb! jmp open
                ;
                close:	;close the file given by d,e
 F0DA 0E10C3C3F0	mvi c,closef! jmp bdos$inr
                ;
                search:	;search for the file given by d,e
 F0DF 0E11C3C3F0	mvi c,searf! jmp bdos$inr
                ;
                searchn:
                	;search for the next occurrence of the file given by d,e
 F0E4 0E12C3C3F0	mvi c,searnf! jmp bdos$inr
                ;
                searchcom:
                	;search for comfcb file
 F0E9 11CDF7C3DF	lxi d,comfcb! jmp search
                ;
                delete:	;delete the file given by d,e
 F0EF 0E13C30500	mvi c,delf! jmp bdos
                ;
                bdos$cond:
 F0F4 CD0500B7C9	call bdos! ora a! ret
                ;
                diskread:
                	;read the next record from the file given by d,e
 F0F9 0E14C3F4F0	mvi c,dreadf! jmp bdos$cond
                ;
                diskreadc:
                	;read the comfcb file
 F0FE 11CDF7C3F9	lxi d,comfcb! jmp diskread
                ;
                diskwrite:
                	;write the next record to the file given by d,e
 F104 0E15C3F4F0	mvi c,dwritf! jmp bdos$cond
                ;
                make:	;create the file given by d,e
 F109 0E16C3C3F0	mvi c,makef! jmp bdos$inr
                ;
                renam:	;rename the file given by d,e
 F10E 0E17C30500	mvi c,renf! jmp bdos
                ;
                getuser:
                	;return current user code in a
 F113 1EFF      	mvi e,0ffh ;drop through to setuser
                ;
                setuser:
 F115 0E20C30500        mvi c,userf! jmp bdos ;sets user number
                ;
                saveuser:
                	;save user#/disk# before possible ^c or transient
 F11A CD13F1    	call getuser ;code to a
 F11D 87878787  	add a! add a! add a! add a ;rot left
 F121 21EFF7B6  	lxi h,cdisk! ora m ;4b=user, 4b=disk
 F125 320400    	sta diska ;stored away in memory for later
 F128 C9        	ret
                ;
                setdiska:
 F129 3AEFF73204	lda cdisk! sta diska ;user/disk
 F12F C9        	ret
                ;
                translate:
                	;translate character in register A to upper case
 F130 FE61D8    	cpi 61h! rc ;return if below lower case a
 F133 FE7BD0    	cpi 7bh! rnc ;return if above lower case z
 F136 E65FC9    	ani 5fh! ret ;translated to upper case
                ;
                readcom:
                	;read the next command into the command buffer
                	;check for submit file
 F139 3AABF7B7CA	lda submit! ora a! jz nosub
                		;scanning a submit file
                		;change drives to open and read the file
 F140 3AEFF7B73E		lda cdisk! ora a! mvi a,0! cnz select
                		;have to open again in case xsub present
 F149 11ACF7CDCB                lxi d,subfcb! call open! jz nosub ;skip if no sub
 F152 3ABBF73D  		lda subrc! dcr a ;read last record(s) first
 F156 32CCF7    		sta subcr ;current record to read
 F159 11ACF7CDF9		lxi d,subfcb! call diskread ;end of file if last record
 F15F C296F1    		jnz nosub
                			;disk read is ok, transfer to combuf
 F162 1107F02180			lxi d,comlen! lxi h,buff! mvi b,128! call move0
                			;line is transferred, close the file with a
                			;deleted record
 F16D 21BAF73600			lxi h,submod! mvi m,0 ;clear fwflag
 F172 2335      			inx h! dcr m ;one less record
 F174 11ACF7CDDA			lxi d,subfcb! call close! jz nosub
                			;close went ok, return to original drive
 F17D 3AEFF7B7C4			lda cdisk! ora a! cnz select
                			;print to the 00
 F184 2108F0CDAC			lxi h,combuf! call prin0
 F18A CDC2F1CAA7			call break$key! jz noread
 F190 CDDDF1C382			call del$sub! jmp ccp ;break key depressed
                			;
 F196 CDDDF1    	nosub:	;no submit file! call del$sub
                	;translate to upper case, store zero at end
 F199 CD1AF1    	call saveuser ;user # save in case control c
 F19C 0E0A1106F0	mvi c,rbuff! lxi d,maxlen! call bdos
 F1A4 CD29F1    	call setdiska ;no control c, so restore diska
                	noread:	;enter here from submit file
                	;set the last character to zero for later scans
 F1A7 2107F046  	lxi h,comlen! mov b,m ;length is in b
 F1AB 2378B7    	readcom0: inx h! mov a,b! ora a ;end of scan?
 F1AE CABAF17E  		jz readcom1! mov a,m ;get character and translate
 F1B2 CD30F17705		call translate! mov m,a! dcr b! jmp readcom0
                		;
                	readcom1: ;end of scan, h,l address end of command
 F1BA 77        		mov m,a ;store a zero
 F1BB 2108F02288		lxi h,combuf! shld comaddr ;ready to scan to zero
 F1C1 C9        	ret
                ;
                break$key:
                	;check for a character ready at the console
 F1C2 0E0BCD0500	mvi c,breakf! call bdos
 F1C7 B7C8      	ora a! rz
 F1C9 0E01CD0500	mvi c,rcharf! call bdos ;character cleared
 F1CE B7C9      	ora a! ret
                ;
                cselect:
                	;get the currently selected drive number to reg-A
 F1D0 0E19C30500	mvi c,cself! jmp bdos
                ;
                setdmabuff:
                	;set default buffer dma address
 F1D5 118000    	lxi d,buff ;(drop through)
                ;
                setdma:
                	;set dma address to d,e
 F1D8 0E1AC30500	mvi c,dmaf! jmp bdos
                ;
                del$sub:
                	;delete the submit file, and set submit flag to false
 F1DD 21ABF77EB7	lxi h,submit! mov a,m! ora a! rz ;return if no sub file
 F1E3 3600      	mvi m,0 ;submit flag is set to false
 F1E5 AFCDBDF0  	xra a! call select ;on drive a to erase file
 F1E9 11ACF7CDEF	lxi d,subfcb! call delete
 F1EF 3AEFF7C3BD	lda cdisk! jmp select ;back to original drive
                ;
                serialize:
                	;check serialization
 F1F5 1128F32100	lxi d,serial! lxi h,bdosl! mvi b,6 ;check six bytes
 F1FD 1ABEC2CFF3	ser0:	ldax d! cmp m! jnz badserial
 F202 132305C2FD		inx d! inx h! dcr b! jnz ser0
 F208 C9        		ret ;serial number is ok
                ;
                comerr:
                	;error in command string starting at position
                	;'staddr' and ending with first delimiter
 F209 CD98F0    	call crlf ;space to next line
 F20C 2A8AF0    	lhld staddr ;h,l address first to print
                	comerr0: ;print characters until blank or zero
 F20F 7EFE20CA22		mov a,m! cpi ' '! jz comerr1; not blank
 F215 B7CA22F2  		ora a! jz comerr1; not zero, so print it
 F219 E5CD8CF0E1		push h! call printchar! pop h! inx h
 F21F C30FF2    		jmp comerr0; for another character
                	comerr1: ;print question mark,and delete sub file
 F222 3E3FCD8CF0		mvi a,'?'! call printchar
 F227 CD98F0CDDD		call crlf! call del$sub
 F22D C382F3    		jmp ccp ;restart with next command
                ;
                ; fcb scan and fill subroutine (entry is at fillfcb below)
                	;fill the comfcb, indexed by A (0 or 16)
                	;subroutines
                	delim:	;look for a delimiter
 F230 1AB7C8    		ldax d! ora a! rz ;not the last element
 F233 FE20DA09F2		cpi ' '! jc comerr ;non graphic
 F238 C8        		rz ;treat blank as delimiter
 F239 FE3DC8    		cpi '='! rz
 F23C FE5FC8    		cpi la!  rz ;left arrow
 F23F FE2EC8    		cpi '.'! rz
 F242 FE3AC8    		cpi ':'! rz
 F245 FE3BC8    		cpi ';'! rz
 F248 FE3CC8    		cpi '<'! rz
 F24B FE3EC8    		cpi '>'! rz
 F24E C9        		ret	;delimiter not found
                ;
                	deblank: ;deblank the input line
 F24F 1AB7C8    		ldax d! ora a! rz ;treat end of line as blank
 F252 FE20C013C3		cpi ' '! rnz! inx d! jmp deblank
                ;
                	addh: ;add a to h,l
 F259 856FD0    		add l! mov l,a! rnc
 F25C 24C9      		inr h! ret
                		;
                fillfcb0:
                	;equivalent to fillfcb(0)
 F25E 3E00      	mvi a,0
                ;
                fillfcb:
 F260 21CDF7CD59	lxi h,comfcb! call addh! push h! push h ;fcb rescanned at end
 F268 AF32F0F7  	xra a! sta sdisk ;clear selected disk (in case A:...)
 F26C 2A88F0EB  	lhld comaddr! xchg ;command address in d,e
 F270 CD4FF2    	call deblank ;to first non-blank character
 F273 EB228AF0  	xchg! shld staddr ;in case of errors
 F277 EBE1      	xchg! pop h ;d,e has command, h,l has fcb address
                	;look for preceding file name A: B: ...
 F279 1AB7CA89F2	ldax d! ora a! jz setcur0 ;use current disk if empty command
 F27E DE4047    	sbi 'A'-1! mov b,a ;disk name held in b if : follows
 F281 131AFE3ACA	inx d! ldax d! cpi ':'! jz setdsk ;set disk name if :
                	;
                	setcur: ;set current disk
 F288 1B        		dcx d ;back to first character of command
                	setcur0:
 F289 3AEFF777C3		lda cdisk! mov m,a! jmp setname
                	;
                	setdsk: ;set disk to name in register b
 F290 7832F0F7  		mov a,b! sta sdisk ;mark as disk selected
 F294 7013      		mov m,b! inx d ;past the :
                	;
                	setname: ;set the file name field
 F296 0608      		mvi b,8 ;file name length (max)
 F298 CD30F2CAB9		setnam0: call delim! jz padname ;not a delimiter
 F29E 23FE2AC2A9			inx h! cpi '*'! jnz setnam1 ;must be ?'s
 F2A4 363FC3ABF2			mvi m,'?'! jmp setnam2 ;to dec count
                		;
 F2A9 7713      		setnam1: mov m,a ;store character to fcb! inx d
 F2AB 05C298F2  		setnam2: dcr b ;count down length! jnz setnam0
                		;
                	;end of name, truncate remainder
 F2AF CD30F2CAC0	trname: call delim! jz setty ;set type field if delimiter
 F2B5 13C3AFF2  		inx d! jmp trname
                		;
 F2B9 23362005C2	padname: inx h! mvi m,' '! dcr b! jnz padname
                		;
                	setty: ;set the type field
 F2C0 0603FE2EC2		mvi b,3! cpi '.'! jnz padty ;skip the type field if no .
 F2C7 13        		inx d ;past the ., to the file type field
                		setty0: ;set the field from the command buffer
 F2C8 CD30F2CAE9			call delim! jz padty! inx h! cpi '*'! jnz setty1
 F2D4 363FC3DBF2			mvi m,'?' ;since * specified! jmp setty2
                			;
                		setty1: ;not a *, so copy to type field
 F2D9 7713      			mov m,a! inx d
                		setty2: ;decrement count and go again
 F2DB 05C2C8F2  			dcr b! jnz setty0
                			;
                		;end of type field, truncate
                	trtyp: ;truncate type field
 F2DF CD30F2CAF0		call delim! jz efill! inx d! jmp trtyp
                		;
                		padty:	;pad the type field with blanks
 F2E9 23362005C2			inx h! mvi m,' '! dcr b! jnz padty
                		;
                	efill: ;end of the filename/filetype fill, save command address
                		;fill the remaining fields for the fcb
 F2F0 0603      		mvi b,3
 F2F2 23360005C2		efill0: inx h! mvi m,0! dcr b! jnz efill0
 F2F9 EB2288F0  		xchg! shld comaddr ;set new starting point
                		;
                		;recover the start address of the fcb and count ?'s
 F2FD E1010B00  		pop h! lxi b,11 ;b=0, c=8+3
 F301 237EFE3FC2		scnq: inx h! mov a,m! cpi '?'! jnz scnq0
 F308 04        		;? found, count it in b! inr b
 F309 0DC201F3  		scnq0: dcr c! jnz scnq
                		;
                		;number of ?'s in c, move to a and return with flags set
 F30D 78B7C9    		mov a,b! ora a! ret
                ;
                intvec:
                	;intrinsic function names (all are four characters)
 F310 44495220  	db	'DIR '
 F314 45524120  	db	'ERA '
 F318 54595045  	db	'TYPE'
 F31C 53415645  	db	'SAVE'
 F320 52454E20  	db	'REN '
 F324 55534552          db      'USER'
 0006 =         	intlen equ ($-intvec)/4 ;intrinsic function length
 F328 0000000000	serial: db 0,0,0,0,0,0
                ;
                ;
                intrinsic:
                	;look for intrinsic functions (comfcb has been filled)
 F32E 2110F30E00	lxi h,intvec! mvi c,0 ;c counts intrinsics as scanned
 F333 79FE06D0  	intrin0: mov a,c! cpi intlen ;done with scan?! rnc
                		;no, more to scan
 F337 11CEF7    		lxi d,comfcb+1 ;beginning of name
 F33A 0604      		mvi b,4 ;length of match is in b
 F33C 1ABE      		intrin1: ldax d! cmp m ;match?
 F33E C24FF3    			jnz intrin2 ;skip if no match
 F341 132305    			inx d! inx h! dcr b
 F344 C23CF3    			jnz intrin1 ;loop while matching
                		;
                		;complete match on name, check for blank in fcb
 F347 1AFE20C254		ldax d! cpi ' '! jnz intrin3 ;otherwise matched
 F34D 79C9      		mov a,c! ret ;with intrinsic number in a
                		;
                		intrin2: ;mismatch, move to end of intrinsic
 F34F 2305C24FF3			inx h! dcr b! jnz intrin2
                		;
                		intrin3: ;try next intrinsic
 F354 0C        			inr c ;to next intrinsic number
 F355 C333F3    			jmp intrin0 ;for another round
                ;
                ccpclear:
                	;clear the command buffer
 F358 AF        	xra	a
 F359 3207F0    	sta	comlen
                	;drop through to start ccp
                ccpstart:
                	;enter here from boot loader
 F35C 31ABF7C5  	lxi sp,stack! push b ;save initial disk number
                        ;(high order 4bits=user code, low 4bits=disk#)
 F360 791F1F1F1F	mov a,c! rar! rar! rar! rar! ani 0fh ;user code
 F367 5FCD15F1  	mov e,a! call setuser ;user code selected
                	;initialize for this user, get $ flag
 F36B CDB8F0            call initialize ;0ffh in accum if $ file present
 F36E 32ABF7            sta submit ;submit flag set if $ file present
 F371 C1                pop b ;recall user code and disk number
 F372 79E60F    	mov a,c! ani 0fh ;disk number in accumulator
 F375 32EFF7            sta cdisk ;clears user code nibble
 F378 CDBDF0    	call select ;proper disk is selected, now check sub files
                	;check for initial command
 F37B 3A07F0B7C2	lda comlen! ora a! jnz ccp0	;assume typed already
                ;
                ccp:
                	;enter here on each command or error condition
 F382 31ABF7    	lxi sp,stack
 F385 CD98F0    	call crlf ;print d> prompt, where d is disk name
 F388 CDD0F1    	call cselect ;get current disk number
 F38B C641CD8CF0	adi 'A'! call printchar
 F390 3E3ECD8CF0	mvi a,'>'! call printchar
 F395 CD39F1    	call readcom ;command buffer filled
                ccp0:	;(enter here from initialization with command full)
 F398 118000CDD8	lxi d,buff! call setdma ;default dma address at buff
 F39E CDD0F132EF	call cselect! sta cdisk ;current disk number saved
 F3A4 CD5EF2    	call fillfcb0 ;command fcb filled
 F3A7 C409F2    	cnz comerr ;the name cannot be an ambiguous reference
 F3AA 3AF0F7B7C2	lda sdisk! ora a! jnz userfunc
                		;check for an intrinsic function
 F3B1 CD2EF3    		call intrinsic
 F3B4 21C1F3    		lxi h,jmptab ;index is in the accumulator
 F3B7 5F16001919		mov e,a! mvi d,0! dad d! dad d ;index in d,e
 F3BC 7E23666FE9		mov a,m! inx h! mov h,m! mov l,a! pchl
                		;pc changes to the proper intrinsic or user function
                		jmptab:
 F3C1 77F4      			dw	direct	;directory search
 F3C3 1FF5      			dw	erase	;file erase
 F3C5 5DF5      			dw	type	;type file
 F3C7 ADF5      			dw	save	;save memory image
 F3C9 10F6      			dw	rename	;file rename
 F3CB 8EF6      			dw	user	;user number
 F3CD A5F6      			dw	userfunc;user-defined function
                		badserial:
 F3CF 21F376    			LXI	H,76F3H	;'DI HLT' instructions.	
                			;typo "lxi h,di or (hlt shl 8)" here originally,
                			;corrected by comparing to disassembly of Clark Calkins.
 F3D2 2200F02100			shld ccploc! lxi h,ccploc! pchl
                			;
                ;
                	;utility subroutines for intrinsic handlers
                	readerr:
                		;print the read error message
 F3D9 01DFF3C3A7		lxi b,rdmsg! jmp print
 F3DF 5245414420		rdmsg: db 'READ ERROR',0
                	;
                	nofile:
                		;print no file message
 F3EA 01F0F3C3A7		lxi b,nofmsg! jmp print
 F3F0 4E4F204649		nofmsg: db 'NO FILE',0
                	;
                	getnumber: ;read a number from the command line
 F3F8 CD5EF2    		call fillfcb0 ;should be number
 F3FB 3AF0F7B7C2		lda sdisk! ora a! jnz comerr ;cannot be prefixed
                		;convert the byte value in comfcb to binary
 F402 21CEF7010B		lxi h,comfcb+1! lxi b,11 ;(b=0, c=11)
                		;value accumulated in b, c counts name length to zero
 F408 7EFE20CA33		conv0:	mov a,m! cpi ' '! jz conv1
                			;more to scan, convert char to binary and add
 F40E 23D630FE0A			inx h! sui '0'! cpi 10! jnc comerr ;valid?
 F416 5778      			mov d,a ;save value! mov a,b ;mult by 10
 F418 E6E0C209F2			ani 1110$0000b! jnz comerr
 F41D 78        			mov a,b ;recover value
 F41E 070707    			rlc! rlc! rlc ;*8
 F421 80DA09F2  			add b! jc comerr
 F425 80DA09F2  			add b! jc comerr ;*8+*2 = *10
 F429 82DA09F2  			add d! jc comerr ;+digit
 F42D 470DC208F4			mov b,a! dcr c! jnz conv0 ;for another digit
 F432 C9        			ret
                		conv1:	;end of digits, check for all blanks
 F433 7EFE20C209			mov a,m! cpi ' '! jnz comerr ;blanks?
 F439 230DC233F4			inx h! dcr c! jnz conv1
 F43E 78C9      			mov a,b ;recover value! ret
                		;
                	movename:
                		;move 3 characters from h,l to d,e addresses
 F440 0603      		mvi b,3
 F442 7E122313  		move0: mov a,m! stax d! inx h! inx d
 F446 05C242F4  			dcr b! jnz move0
 F44A C9        		ret
                	;
                	addhcf:	;buff + a + c to h,l followed by fetch
 F44B 21800081CD		lxi h,buff! add c! call addh! mov a,m! ret
                	;
                	setdisk:
                		;change disks for this command, if requested
 F454 AF32CDF7  		xra a! sta comfcb ;clear disk name from fcb
 F458 3AF0F7B7C8		lda sdisk! ora a! rz ;no action if not specified
 F45D 3D21EFF7BE		dcr a! lxi h,cdisk! cmp m! rz ;already selected
 F463 C3BDF0    		jmp select
                	;
                	resetdisk:
                		;return to original disk after command
 F466 3AF0F7B7C8		lda sdisk! ora a! rz ;no action if not selected
 F46B 3D21EFF7BE		dcr a! lxi h,cdisk! cmp m! rz ;same disk
 F471 3AEFF7C3BD		lda cdisk! jmp select
                ;
                	;individual intrinsics follow
                direct:
                	;directory search
 F477 CD5EF2    	call fillfcb0 ;comfcb gets file name
 F47A CD54F4    	call setdisk ;change disk drives if requested
 F47D 21CEF77E  	lxi h,comfcb+1! mov a,m ;may be empty request
 F481 FE20C28FF4	cpi ' '! jnz dir1 ;skip fill of ??? if not blank
                		;set comfcb to all ??? for current disk
 F486 060B      		mvi b,11 ;length of fill ????????.???
 F488 363F2305C2		dir0: mvi m,'?'! inx h! dcr b! jnz dir0
                	;not a blank request, must be in comfcb
 F48F 1E00D5    	dir1:	mvi e,0! push d ;E counts directory entries
 F492 CDE9F0    		call searchcom ;first one has been found
 F495 CCEAF3    		cz nofile ;not found message
 F498 CA1BF5    	dir2:	jz endir
                		;found, but may be system file
 F49B 3AEEF7    		lda dcnt ;get the location of the element
 F49E 0F0F0FE660		rrc! rrc! rrc! ani 110$0000b! mov c,a
                		;c contains base index into buff for dir entry
 F4A4 3E0ACD4BF4		mvi a,sysfile! call addhcf ;value to A
 F4A9 17DA0FF5  		ral! jc dir6 ;skip if system file
                		;c holds index into buffer
                		;another fcb found, new line?
 F4AD D17B1CD5  		pop d! mov a,e! inr e! push d
                		;e=0,1,2,3,...new line if mod 4 = 0
 F4B1 E603F5    		ani 11b! push psw ;and save the test
 F4B4 C2CCF4    			jnz dirhdr0 ;header on current line
 F4B7 CD98F0    			call crlf
 F4BA C5CDD0F1C1			push b! call cselect! pop b
                			;current disk in A
 F4BF C641CD92F0			adi 'A'! call printbc
 F4C4 3E3ACD92F0			mvi a,':'! call printbc
 F4C9 C3D4F4    			jmp dirhdr1 ;skip current line hdr
 F4CC CDA2F0    		dirhdr0:call blank ;after last one
 F4CF 3E3ACD92F0			mvi a,':'! call printbc
                		dirhdr1:
 F4D4 CDA2F0    			call blank
                		;compute position of name in buffer
 F4D7 0601      		mvi b,1 ;start with first character of name
 F4D9 78CD4BF4  		dir3:	mov a,b! call addhcf ;buff+a+c fetched
 F4DD E67F      			ani 7fh ;mask flags
                			;may delete trailing blanks
 F4DF FE20C2F9F4			cpi ' '! jnz dir4 ;check for blank type
 F4E4 F1F5      			pop psw! push psw ;may be 3rd item
 F4E6 FE03C2F7F4			cpi 3! jnz dirb ;place blank at end if not
 F4EB 3E09CD4BF4			mvi a,9! call addhcf ;first char of type
 F4F0 E67FFE20CA			ani 7fh! cpi ' '! jz dir5
                			;not a blank in the file type field
 F4F7 3E20      		dirb:	mvi a,' ' ;restore trailing filename chr
                		dir4:
 F4F9 CD92F0    			call printbc ;char printed
 F4FC 0478FE0CD2			inr b! mov a,b! cpi 12! jnc dir5
                			;check for break between names
 F503 FE09C2D9F4			cpi 9! jnz dir3 ;for another char
                			;print a blank between names
 F508 CDA2F0C3D9			call blank! jmp dir3
                		;
                	dir5:	;end of current entry
 F50E F1        		pop psw ;discard the directory counter (mod 4)
 F50F CDC2F1    	dir6:	call break$key ;check for interrupt at keyboard
 F512 C21BF5    		jnz endir ;abort directory search
 F515 CDE4F0C398		call searchn! jmp dir2 ;for another entry
                	endir:	;end of directory scan
 F51B D1        		pop d ;discard directory counter
 F51C C386F7    		jmp retcom
                ;
                ;
                erase:
 F51F CD5EF2    	call fillfcb0 ;cannot be all ???'s
 F522 FE0B      	cpi 11
 F524 C242F5    	jnz erasefile
                		;erasing all of the disk
 F527 0152F5CDA7		lxi b,ermsg! call print!
 F52D CD39F1    		call readcom
 F530 2107F035C2		lxi h,comlen! dcr m! jnz ccp ;bad input
 F537 237EFE59C2		inx h! mov a,m! cpi 'Y'! jnz ccp
                		;ok, erase the entire diskette
 F53E 232288F0  		inx h! shld comaddr ;otherwise error at retcom
                	erasefile:
 F542 CD54F4    		call setdisk
 F545 11CDF7CDEF		lxi d,comfcb! call delete
 F54B 3C        		inr a ;255 returned if not found
 F54C CCEAF3    		cz nofile ;no file message if so
 F54F C386F7    		jmp retcom
                ;
 F552 414C4C2028	ermsg:	db	'ALL (Y/N)?',0
                ;
                type:
 F55D CD5EF2C209	call fillfcb0! jnz comerr ;don't allow ?'s in file name
 F563 CD54F4CDD0	call setdisk! call openc ;open the file
 F569 CAA7F5    	jz typerr ;zero flag indicates not found
                		;file opened, read 'til eof
 F56C CD98F021F1		call crlf! lxi h,bptr! mvi m,255 ;read first buffer
                		type0:	;loop on bptr
 F574 21F1F77EFE			lxi h,bptr! mov a,m! cpi 128 ;end buffer
 F57A DA87F5E5  			jc type1! push h ;carry if 0,1,...,127
                			;read another buffer full
 F57E CDFEF0E1  			call diskreadc! pop h ;recover address of bptr
 F582 C2A0F5    			jnz typeof ;hard end of file
 F585 AF77      			xra a! mov m,a ;bptr = 0
                		type1:	;read character at bptr and print
 F587 34        			inr m ;bptr = bptr + 1
 F588 218000CD59			lxi h,buff! call addh ;h,l addresses char
 F58E 7EFE1ACA86			mov a,m! cpi eofile! jz retcom
 F594 CD8CF0    			call printchar
 F597 CDC2F1C286			call break$key! jnz retcom ;abort if break
 F59D C374F5    			jmp type0 ;for another character
                		;
                		typeof:	;end of file, check for errors
 F5A0 3DCA86F7  			dcr a! jz retcom
 F5A4 CDD9F3    			call readerr
 F5A7 CD66F4C309		typerr:	call resetdisk! jmp comerr
                ;
                save:
 F5AD CDF8F3    		call getnumber; value to register a
 F5B0 F5        		push psw ;save it for later
                		;
                		;should be followed by a file to save the memory image
 F5B1 CD5EF2    		call fillfcb0
 F5B4 C209F2    		jnz comerr ;cannot be ambiguous
 F5B7 CD54F4    		call setdisk ;may be a disk change
 F5BA 11CDF7D5CD		lxi d,comfcb! push d! call delete ;existing file removed
 F5C1 D1CD09F1  		pop d! call make ;create a new file on disk
 F5C5 CAFBF5    		jz saverr ;no directory space
 F5C8 AF32EDF7  		xra a! sta comrec; clear next record field
 F5CC F1        		pop psw ;#pages to write is in a, change to #sectors
 F5CD 6F260029  		mov l,a! mvi h,0! dad h! 
 F5D1 110001    		lxi d,tran ;h,l is sector count, d,e is load address
                	save0:	;check for sector count zero
 F5D4 7CB5CAF1F5		mov a,h! ora l! jz save1 ;may be completed
 F5D9 2B        		dcx h ;sector count = sector count - 1
 F5DA E5        		push h ;save it for next time around
 F5DB 21800019E5		lxi h,128! dad d! push h ;next dma address saved
 F5E0 CDD8F1    		call setdma ;current dma address set
 F5E3 11CDF7CD04		lxi d,comfcb! call diskwrite
 F5E9 D1E1      		pop d! pop h ;dma address, sector count
 F5EB C2FBF5    		jnz saverr ;may be disk full case
 F5EE C3D4F5    		jmp save0 ;for another sector
                		;
                	save1:	;end of dump, close the file
 F5F1 11CDF7CDDA		lxi d,comfcb! call close
 F5F7 3C        		inr a; 255 becomes 00 if error
 F5F8 C201F6    		jnz retsave ;for another command
                	saverr:	;must be full or read only disk
 F5FB 0107F6CDA7		lxi b,fullmsg! call print
                	retsave:
                		;reset dma buffer
 F601 CDD5F1    		call setdmabuff
 F604 C386F7    		jmp retcom
 F607 4E4F205350		fullmsg: db 'NO SPACE',0
                		;
                ;
                rename:
                	;rename a file on a specific disk
 F610 CD5EF2C209	call fillfcb0! jnz comerr ;must be unambiguous
 F616 3AF0F7F5  	lda sdisk! push psw ;save for later compare
 F61A CD54F4    	call setdisk ;disk selected
 F61D CDE9F0    	call searchcom ;is new name already there?
 F620 C279F6    	jnz renerr3
                		;file doesn't exist, move to second half of fcb
 F623 21CDF711DD		lxi h,comfcb! lxi d,comfcb+16! mvi b,16! call move0
                		;check for = or left arrow
 F62E 2A88F0EBCD		lhld comaddr! xchg! call deblank
 F635 FE3DCA3FF6		cpi '='! jz ren1 ;ok if =
 F63A FE5FC273F6		cpi la! jnz renerr2
 F63F EB232288F0	ren1:	xchg! inx h! shld comaddr ;past delimiter
                		;proper delimiter found
 F644 CD5EF2C273		call fillfcb0! jnz renerr2
                		;check for drive conflict
 F64A F147      			pop psw! mov b,a ;previous drive number
 F64C 21F0F77EB7			lxi h,sdisk! mov a,m! ora a! jz ren2
                			;drive name was specified.  same one?
 F654 B870C273F6			cmp b! mov m,b! jnz renerr2
 F659 70        	ren2:	mov m,b ;store the name in case drives switched
 F65A AF32CDF7CD		xra a! sta comfcb! call searchcom ;is old file there?
 F661 CA6DF6    		jz renerr1
                		;
                		;everything is ok, rename the file
 F664 11CDF7CD0E		lxi d,comfcb! call renam
 F66A C386F7    		jmp retcom
                		;
                	renerr1:; no file on disk
 F66D CDEAF3C386		call nofile! jmp retcom
                	renerr2:; ambigous reference/name conflict
 F673 CD66F4C309		call resetdisk! jmp comerr
                	renerr3:; file already exists
 F679 0182F6CDA7		lxi b,renmsg! call print! jmp retcom
 F682 46494C4520		renmsg: db 'FILE EXISTS',0
                ;
                user:
                	;set user number
 F68E CDF8F3    	call getnumber; leaves the value in the accumulator
 F691 FE10D209F2	cpi 16! jnc comerr; must be between 0 and 15
 F696 5F        	mov e,a ;save for setuser call
 F697 3ACEF7FE20	lda comfcb+1! cpi ' '! jz comerr
 F69F CD15F1    	call setuser ;new user number set
 F6A2 C389F7    	jmp endcom
                ;
                userfunc:
 F6A5 CDF5F1    	call serialize ;check serialization
                	;load user function and set up for execution
 F6A8 3ACEF7FE20	lda comfcb+1! cpi ' '! jnz user0
                		;no file name, but may be disk switch
 F6B0 3AF0F7B7CA		lda sdisk! ora a! jz endcom ;no disk name if 0
 F6B7 3D32EFF7CD		dcr a! sta cdisk! call setdiska ;set user/disk
 F6BE CDBDF0C389		call select! jmp endcom
                	user0:	;file name is present
 F6C4 11D6F71AFE		lxi d,comfcb+9! ldax d! cpi ' '! jnz comerr ;type ' '
 F6CD D5CD54F4D1		push d! call setdisk! pop d! lxi h,comtype ;.com
 F6D5 CD40F4    		call movename ;file type is set to .com
 F6D8 CDD0F0CA6B		call openc! jz userer
                		;file opened properly, read it into memory
 F6DE 210001    		lxi h,tran ;transient program base
 F6E1 E5        		load0:	push h ;save dma address
 F6E2 EBCDD8F1  			xchg! call setdma
 F6E6 11CDF7CDF9			lxi d,comfcb! call diskread! jnz load1
                			;sector loaded, set new dma address and compare
 F6EF E111800019			pop h! lxi d,128! dad d
 F6F4 1100F0    			lxi d,tranm ;has the load overflowed?
 F6F7 7D937C9AD2			mov a,l! sub e! mov a,h! sbb d! jnc loaderr
 F6FE C3E1F6    			jmp load0 ;for another sector
                			;
 F701 E13DC271F7		load1:	pop h! dcr a! jnz loaderr ;end file is 1
 F706 CD66F4    			call resetdisk ;back to original disk
 F709 CD5EF221F0			call fillfcb0! lxi h,sdisk! push h
 F710 7E32CDF7  			mov a,m! sta comfcb ;drive number set
 F714 3E10CD60F2			mvi a,16! call fillfcb ;move entire fcb to memory
 F719 E17E32DDF7			pop h! mov a,m! sta comfcb+16
 F71E AF32EDF7  			xra a! sta comrec ;record number set to zero
 F722 115C0021CD			lxi d,fcb! lxi h,comfcb! mvi b,33! call move0
                			;move command line to buff
 F72D 2108F0    			lxi h,combuf
 F730 7EB7CA3EF7		bmove0:	mov a,m! ora a! jz bmove1! cpi ' '! jz bmove1
 F73A 23C330F7  			inx h! jmp bmove0 ;for another scan
                			;first blank position found
 F73E 0600118100		bmove1:	mvi b,0! lxi d,buff+1! ;ready for the move
 F743 7E12B7CA4F		bmove2:	mov a,m! stax d! ora a! jz bmove3
                			;more to move
 F749 042313C343			inr b! inx h! inx d! jmp bmove2
                		bmove3:	;b has character count
 F74F 78328000  			mov a,b! sta buff
 F753 CD98F0    			call crlf
                			;now go to the loaded program
 F756 CDD5F1    			call setdmabuff ;default dma
 F759 CD1AF1    			call saveuser ;user code saved
                			;low memory diska contains user code
 F75C CD0001    			call tran ;gone to the loaded program
 F75F 31ABF7    			lxi sp,stack ;may come back here
 F762 CD29F1CDBD			call setdiska! call select
 F768 C382F3    			jmp ccp
                		;
                		userer:	;arrive here on command error
 F76B CD66F4C309			call resetdisk! jmp comerr
                			;
                		loaderr:;cannot load the program
 F771 017AF7CDA7			lxi b,loadmsg! call print
 F777 C386F7    			jmp retcom
 F77A 424144204C			loadmsg: db 'BAD LOAD',0
 F783 434F4D    		comtype:	db 'COM' ;for com files
                ;
                ;
                retcom:	;reset disk before end of command check
 F786 CD66F4    	call resetdisk
                ;
                endcom:	;end of intrinsic command
 F789 CD5EF2    	call fillfcb0 ;to check for garbage at end of line
 F78C 3ACEF7D620	lda comfcb+1! sui ' '! lxi h,sdisk! ora m
                	;0 in accumulator if no disk selected, and blank fcb
 F795 C209F2    	jnz comerr
 F798 C382F3    	jmp ccp
                ;
                ;
                ;
                ;	data areas
 F79B           	ds	16	;8 level stack
                stack:
                ;
                ;	'submit' file control block
 F7AB 00        submit:	db	0	;00 if no submit file, ff if submitting
 F7AC 0024242420subfcb:	db	0,'$$$     '	;file name is $$$
 F7B5 5355420000	db	'SUB',0,0	;file type is sub
 F7BA 00        submod:	db	0	;module number
 F7BB           subrc:	ds	1	;record count filed
 F7BC           	ds	16	;disk map
 F7CC           subcr:	ds	1	;current record to read
                ;
                ;	command file control block
 F7CD           comfcb:	ds	32	;fields filled in later
 F7ED           comrec:	ds	1	;current record to read/write
 F7EE           dcnt:	ds	1	;disk directory count (used for error codes)
 F7EF           cdisk:	ds	1	;current disk
 F7F0           sdisk:	ds	1	;selected disk for current operation
                			;none=0, a=1, b=2 ...
 F7F1           bptr:	ds	1	;buffer pointer
 F7F2           	end	ccploc
